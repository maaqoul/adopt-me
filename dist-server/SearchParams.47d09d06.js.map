{"version":3,"sources":["../src/useBreedList.js","../src/Pet.js","../src/Results.js","../src/SearchParams.js"],"names":["localCache","useBreedList","animal","breedList","setBreedList","status","setStatus","requestBreedList","res","fetch","json","breeds","Pet","name","breed","images","location","id","hero","length","Results","pets","map","pet","city","state","SearchParams","ANIMALS","updateAnimal","updateLocation","updateBreed","setPets","theme","setTheme","ThemeContext","requestPets","e","preventDefault","target","value","backgroundColor"],"mappings":"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","file":"SearchParams.47d09d06.js","sourceRoot":"../server","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst localCache = {};\n\nexport default function useBreedList(animal) {\n    const [breedList, setBreedList] = useState([]);\n    const [status, setStatus] = useState(\"unloaded\");\n\n    useEffect(() => {\n        if (!animal) {\n            setBreedList([]);\n        } else if (localCache[animal]) {\n            setBreedList(localCache[animal]);\n        } else {\n            requestBreedList();\n        }\n\n        async function requestBreedList() {\n            setBreedList([]);\n            setStatus(\"loading\");\n            const res = await fetch(\n                `http://pets-v2.dev-apis.com/breeds?animal=${animal}`\n            );\n            const json = await res.json();\n            localCache[animal] = json.breeds || [];\n            setBreedList(localCache[animal]);\n            setStatus(\"loaded\");\n        }\n    }, [animal]);\n\n    return [breedList, status];\n}","\nimport { Link } from 'react-router-dom';\n\nconst Pet = ({ name, animal, breed, images, location, id }) => {\n    let hero = \"http://pets-images.dev-apis.com/pets/none.jpg\";\n    if (images.length) {\n        hero = images[0];\n    }\n\n    return (\n        <Link to={`/details/${id}`} className=\"pet\">\n            <div className=\"image-container\">\n                <img src={hero} alt={name} />\n            </div>\n            <div className=\"info\">\n                <h1>{name}</h1>\n                <h2>{`${animal} — ${breed} — ${location}`}</h2>\n            </div>\n        </Link>\n    );\n};\n\nexport default Pet;","import Pet from './Pet';\n\nconst Results = ({ pets }) => {\n    return (\n        <div className=\"search\">\n            {!pets.length ? (<h2>No Pets Found</h2>) : (pets.map((pet) => (\n                <Pet\n                    name={pet.name}\n                    animal={pet.animal}\n                    breed={pet.breed}\n                    key={pet.id}\n                    images={pet.images}\n                    location={`${pet.city}, ${pet.state}`}\n                    id={pet.id}\n                />\n            )))}\n        </div>\n    )\n}\n\nexport default Results;","import { useEffect, useState, useContext } from \"react\";\nimport ThemeContext from './ThemeContext';\nimport useBreedList from './useBreedList';\nimport Results from \"./Results\";\n\nconst ANIMALS = [\"bird\", \"cat\", \"dog\", \"rabbit\", \"reptile\"];\n\nconst SearchParams = () => {\n    const [animal, updateAnimal] = useState(\"\");\n    const [location, updateLocation] = useState(\"\");\n    const [breed, updateBreed] = useState(\"\");\n    const [pets, setPets] = useState([]);\n    const [breeds] = useBreedList(animal);\n    const [theme, setTheme] = useContext(ThemeContext);\n\n\n    useEffect(() => {\n        requestPets();\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    async function requestPets() {\n        const res = await fetch(\n            `http://pets-v2.dev-apis.com/pets?animal=${animal}&location=${location}&breed=${breed}`\n        );\n        const json = await res.json();\n\n        setPets(json.pets);\n    }\n\n    return (\n        <div className=\"search-params\">\n            <form\n                onSubmit={e => {\n                    e.preventDefault();\n                    requestPets();\n                }}>\n                <label htmlFor=\"location\">\n                    Location\n          <input\n                        id=\"location\"\n                        value={location}\n                        placeholder=\"Location\"\n                        onChange={(e) => updateLocation(e.target.value)}\n                    />\n                </label>\n                <label htmlFor=\"animal\">\n                    Animal\n          <select\n                        id=\"animal\"\n                        value={animal}\n                        onChange={(e) => updateAnimal(e.target.value)}\n                        onBlur={(e) => updateAnimal(e.target.value)}\n                    >\n                        <option />\n                        {ANIMALS.map((animal) => (\n                            <option key={animal} value={animal}>\n                                {animal}\n                            </option>\n                        ))}\n                    </select>\n                </label>\n                <label htmlFor=\"breed\">\n                    Breed\n          <select\n                        disabled={!breeds.length}\n                        id=\"breed\"\n                        value={breed}\n                        onChange={(e) => updateBreed(e.target.value)}\n                        onBlur={(e) => updateBreed(e.target.value)}\n                    >\n                        <option />\n                        {breeds.map((breed) => (\n                            <option key={breed} value={breed}>\n                                {breed}\n                            </option>\n                        ))}\n                    </select>\n                </label>\n                <label htmlFor=\"theme\">\n                    Theme\n                    <select\n                        value={theme}\n                        onChange={(e) => setTheme(e.target.value)}\n                        onBlur={(e) => setTheme(e.target.value)}\n                    >\n                        <option value=\"darkBlue\">Dark Blue</option>\n                        <option value=\"peru\">Peru</option>\n                        <option value=\"chartreuse\">Chartreuse</option>\n                        <option value=\"mediumorchid\">Medium Orchid</option>\n                    </select>\n                </label>\n                <button style={{ backgroundColor: theme }}>Submit</button>\n            </form>\n            <Results pets={pets} />\n        </div>\n    );\n};\n\nexport default SearchParams;"]}